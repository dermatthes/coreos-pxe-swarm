#cloud-config



hostname: swarmmaster-{{ STR_REPLACE(".", "-", REMOTE_IP()) }}
ssh_authorized_keys:
  - {{ TRIM(FILE("/root/rsa_public_key")) }}

write_files:
  - path: "/root/rsa_public_key"
    encoding: b64
    permissions: '0655'
    owner: core:root
    content: {{ BASE64_ENC(FILE("/root/rsa_public_key")) }}


write_files:
  - path: "/root/master_run.sh"
    encoding: b64
    permissions: '0700'
    owner: core:root
    content: {{ BASE64_ENC(FILE("/root/master_run.sh")) }}

write_files:
  - path: "/root/bootstrap_run.sh"
    encoding: b64
    permissions: '0700'
    owner: core:root
    content: {{ BASE64_ENC(FILE("/root/bootstrap_run.sh")) }}

write_files:
  - path: "/root/config"
    owner: core:root
    content: {{ TRIM(FILE("/root/config")) }}

write_files:
  - path: "/etc/environment"
    permissions: '0655'
    owner: core:root
    content: |
      COREOS_PRIVATE_IPV4={{ REMOTE_IP() }}
      DHCP_RANGE={{ ENV("DHCP_RANGE") }}

write_files:
  - path: "/root/promote_masters.sh"
    owner: core:root
    permissions: '0755'
    content: |
      #!/bin/bash
      set +e
      while [ 1 ]; do
          sleep 30
          docker node promote `docker node ls | tail -n +2 | awk '{print $1} '`
      done


write_files:
  - path: "/etc/exports"
    permissions: '0655'
    owner: core:root
    content: |
      /srv/nfs 10.16.0.0/24(rw,async,no_subtree_check,no_root_squash,fsid=0)


write_files:
  - path: "/root/firewall.rules"
    encoding: b64
    permissions: '0655'
    owner: core:root
    content: {{ BASE64_ENC(FILE("/root/firewall.rules")) }}

write_files:
  - path: "/var/lib/iptables/rules-save"
    encoding: b64
    permissions: '0655'
    owner: core:root
    content: {{ BASE64_ENC(FILE("/root/firewall.rules")) }}

write_files:
  - path: "/root/reboot-timer.sh"
    owner: root:root
    permissions: '0700'
    encoding: b64
    content: {{ BASE64_ENC(FILE("/app/reboot-timer.sh")) }}

write-files:
  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""
coreos:
  units:
    - name: rpc-statd.service
      command: start
      enable: true
    - name: mnt.mount
      command: start
      content: |
        [Mount]
        What={{ ENV("NFS_MOUNT") }}
        Where=/mnt
        Type=nfs

coreos:
  units:
    - name: iptables-restore.service
      command: start
      enable: true

    - name: swarm-init.service
      command: start
      content: |
        [Unit]
        Description=Docker Master
        After=docker.service
        Requires=docker.service
        [Service]
        EnvironmentFile=/etc/environment
        ExecStart=/bin/bash -c "docker swarm init --advertise-addr {{ REMOTE_IP() }} && docker swarm join-token -q worker > /root/worker_join_token && sleep 5 && docker run --net=host -e NFS_MOUNT={{ ENV("NFS_MOUNT") }} -e MODE=WORKERJOIN -e DHCP_RANGE=$DHCP_RANGE -e PXE_SERVER_IP=$COREOS_PRIVATE_IPV4 -v /root/master_run.sh:/root/master_run.sh -v /root/firewall.rules:/root/firewall.rules -v /root/config:/root/config -v /root/worker_join_token:/root/worker_join_token -v /root/rsa_public_key:/root/rsa_public_key --name coreos-pxe-swarm dermatthes/coreos-pxe-swarm"
        ExecStop=/usr/bin/docker stop coreos-pxe-swarm

    - name: promote-master.service
      command: start
      content: |
        [Unit]
        Description=Docker Master
        After=docker.service
        Requires=docker.service
        [Service]
        EnvironmentFile=/etc/environment
        ExecStart=/root/promote_masters.sh

    - name: reboot.service
      command: start
      content: |
        [Unit]
        Description=Reboot the server
        After=sysinit.target
        Requires=sysinit.target
        [Service]
        Restart=always
        EnvironmentFile=/etc/environment
        ExecStart=/root/reboot-timer.sh

    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=sysinit.target
        Requires=sysinit.target
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/mkfs.ext4 -F -L COREOS_ROOT /dev/disk/by-label/COREOS_ROOT

    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        [Mount]
        What=/dev/disk/by-label/COREOS_ROOT
        Where=/var/lib/docker
        Type=ext4

    - name: nfs-server-bind.service
      command: start
      content: |
        [Unit]
        Description=Link /var/lib/docker/nfs to /srv/nfs
        Requires=var-lib-docker.mount
        After=var-lib-docker.mount
        Before=rpc-mountd.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/mkdir /var/lib/docker/nfs
        ExecStart=/usr/bin/ln -s /var/lib/docker/nfs /srv/nfs

    - name: rpc-mountd.service
      command: start
      enable: true

    - name: run-bootstrap.service
      command: start
      content: |
        [Unit]
        Description=Run the Script /root/bootstrap_run.sh (only on first node)
        After=swarm-init.service
        Requires=swarm-init.service
        [Service]
        Type=oneshot
        EnvironmentFile=/etc/environment
        RemainAfterExit=yes
        ExecStart=/root/bootstrap_run.sh

    - name: run-master.service
      command: start
      content: |
        [Unit]
        Description=Run the Script /root/master_run.sh
        After=run-bootstrap.service
        Requires=run-bootstrap.service
        [Service]
        Type=oneshot
        EnvironmentFile=/etc/environment
        RemainAfterExit=yes
        ExecStart=/root/master_run.sh

    - name: docker.service
      drop-ins:
        - name: 10-wait-docker.conf
          content: |
            [Unit]
            After=var-lib-docker.mount
            Requires=var-lib-docker.mount




